% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/simulateExpression.R
\name{simulationWrapper.filter}
\alias{simulationWrapper.filter}
\title{Wrapper for simulating M datasets}
\usage{
simulationWrapper.filter(counts, Nsim = 1, Nsamples = 50, Ngenes = NULL,
  pi0 = NULL, sample_method = c("all_genes", "per_gene"),
  sampleFractionExpressed = 0.25, featureFractionExpressed = 0.25,
  beta_args = args.big_normal(betapi = c(1), betamu = c(0), betasd = c(1)))
}
\arguments{
\item{counts}{gene by sample count matrix}

\item{Nsim}{number of simulated datasets}

\item{Ngenes}{number of genes. Defaults to include all genes in the input data.}

\item{Nsample}{number of samples per biological condition}
}
\value{
List of data generated under three different fractions of null genes.
  \code{null} pi0 = 0. List of Nsim simulated datasets.
  \code{normal_5} pi0 = 0.5. List of Nsim simulated datasets. For each simulated dataset, I store the count table and a logical vector indicating TRUE = null gene, and FALSE = true DE gene.
  \code{norma_9} pi0 = 0.9. List of Nsim simulated datasets. List of Nsim simulated datasets. For each simulated dataset, I store the count table and a logical vector indicating TRUE = null gene, and FALSE = true DE gene.
}
\description{
This different version of simulationWrapper first selects
             single cell samples, performs filtering, selects a subset of genes,
             and then performs  permutation at the gene-level or sample-level.
             This is in contrast with the previous approach, where filtering is performed
             after select a subset of genes and permuting labels.
}
\examples{
ipsc_eset <- get(load(system.file("testdata", "HumanTungiPSC.rda", package = "ashbun")))
counts <- exprs(ipsc_eset)[sample(nrow(exprs(ipsc_eset)), ), ]

simdata_list <- simulationWrapper(counts, Nsim = 5, Nsample = 80, Ngenes = 500)

library(singleCellRNASeqHumanTungiPSC)
eset <- HumanTungiPSC
counts <- exprs(eset)[,pData(eset)$individual == "NA19101"]

sim_data_null <- simulationWrapper(counts,
                              Ngenes = 100,
                              Nsamples = 20,
                              sample_method = "all_genes",
                              pi0 = 1)

sim_data_nonnull <- simulationWrapper(counts, Nsim = 2,
                              Ngenes = 100,
                              Nsam = 20,
                              sample_method = "all_genes",
                              pi0 = .5,
                              beta_args = args.big_normal(betapi = 1,
                                                          betamu = 0, betasd = .8))

}
