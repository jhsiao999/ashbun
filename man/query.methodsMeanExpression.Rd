% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/evaluateMethods.R
\name{query.methodsMeanExpression}
\alias{query.methodsMeanExpression}
\title{Runs multiple DE methods}
\usage{
query.methodsMeanExpression(counts, counts_normed, condition, libsize_factors,
  methodsMeanExpression = c("DESeq2", "limmaVoom", "edgeR", "BPSC", "MAST",
  "ROTS"))
}
\arguments{
\item{counts}{Gene by sample expression count matrix (G by N). Use filtered count data.}

\item{counts_normed}{Normalized expression count matrix
(typicall CPM with normlized library size).}

\item{condition}{Binary vector of length N indicating sample biological condition.}

\item{libsize_factors}{Numeric vector of scale factors for library size factors.}

\item{methodsMeanExpression}{Chararacter vector of evaluted methods. To run all methods, use
c("DESeq2", "limmaVoom", "edgeR","BPSC", "MAST", "ROTS")}

\item{control}{\code{pseudocount} Default .5. For limmaVoom and MAST. If NULL, then do not use pseudocount.}
}
\value{
\code{pvalues} data.frame of significance values. Columns corresond to input methods.
}
\examples{
ipsc_eset <- get(load(system.file("testdata", "HumanTungiPSC.rda", package = "ashbun")))
counts <- exprs(ipsc_eset)[sample(nrow(exprs(ipsc_eset)), 500), ]
condition <- pData(ipsc_eset)$replicate

----- Step 1: filtering
counts_filtered <- filter.excludeAllZeros(counts)
featuresToInclude <- filterFeatures.fractionExpressed(counts_filtered,
                                                     thresholdDetection = 1,
                                                     fractionExpressed = .01)$index_filter

samplesToInclude <-  filterSamples.fractionExpressed(counts_filtered,
                                                     thresholdDetection = 1,
                                                     fractionExpressed = .01)$index_filter

counts_filtered <- counts_filtered[featuresToInclude, samplesToInclude]

---- Step 2: compute library size factors
libsize_factors <- normalize.scran(counts = counts_filtered)$libsize_factors
counts_normed <- normalize.cpm(counts_filtered, libsize_factors)$cpm

---- Step 3: run DE methods
pvals_list <- query.methodsMeanExpression(counts = counts_filtered,
                                          counts_normed = counts_normed,
                                          condition = condition_filtered,
                                          libsize_factors = libsize_factors,
                                          methodsMeanExpression = c("limmaVoom",
                                                                    "DESeq2",
                                                                    "edgeR",
                                                                    "MAST"))
}
\author{
Chiaowen Joyce Hsiao
}
