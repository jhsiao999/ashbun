% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/evaluateMethods.R
\name{query.pipeline}
\alias{query.pipeline}
\title{Evalute multiple normalization methods and multiple DE methods}
\usage{
query.pipeline(counts, condition, methodsNormalize, methodsMeanExpression)
}
\arguments{
\item{counts}{Gene by sample expression count matrix (G by N). 
Use raw count data before filtering.}

\item{condition}{Binary vector of length N indicating sample biological condition.}

\item{methodsNormalize}{Chararacter vector of evaluted methods. To run all methods, use
c("normalize.cpm", "normalize.tmm", "normalize.rle",
 "normalize.census", "normalize.scnorm", "normalize.scran")}

\item{methodsMeanExpression}{Chararacter vector of evaluted methods. To run all methods, use
c("DESeq2", "limmaVoom", "edgeR","BPSC", "MAST", "ROTS")}

\item{null}{binary indicator of true/false. True = Non-null gene and FALSE = Null gene.}
}
\value{
\code{pvals_longformat} data.frame of pvals.
}
\examples{
ipsc_eset <- get(load(system.file("testdata", "HumanTungiPSC.rda", package = "ashbun")))
counts <- exprs(ipsc_eset)[sample(nrow(exprs(ipsc_eset)), ), ]

#---- generat simulated datasets
simdata_list <- simulationWrapper(counts, Nsim = 5, Nsample = 100, Ngene = 500)

#---- extract a single dataset as an example
#---- take pi0 = .9, the first simulated data
simdata <- simdata_list[[3]][[1]]


ipsc_eset <- get(load(system.file("testdata", "HumanTungiPSC.rda", package = "ashbun")))
counts <- exprs(ipsc_eset)[sample(nrow(exprs(ipsc_eset)), 500), ]
condition <- pData(ipsc_eset)$replicate

results <- query.pipeline(counts = counts,
                          condition = condition,
                          methodsNormalize = c("TMM", "RLE", "census","scran"),
                          methodsMeanExpression = c("DESeq2", "limmaVoom"))

}
\author{
Chiaowen Joyce Hsiao
}
