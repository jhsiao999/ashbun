% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/evaluateMethods.R
\name{query.pipeline}
\alias{query.pipeline}
\title{Run multiple normalization methods and multiple DE methods}
\usage{
query.pipeline(counts, condition, is_nullgene = NULL,
  methodsNormalize = c("LIB", "TMM", "RLE", "census", "SCnorm", "scran"),
  methodsMeanExpression = c("DESeq2", "limmaVoom", "edgeR", "BPSC", "MAST",
  "ROTS", "scde"))
}
\arguments{
\item{counts}{Gene by sample expression count matrix (G by N).
Use raw count data before filtering.}

\item{condition}{Binary vector of length N indicating sample biological condition.}

\item{methodsNormalize}{Chararacter vector of evaluted methods. To run all methods, use
c("normalize.cpm", "normalize.tmm", "normalize.rle",
 "normalize.census", "normalize.scnorm", "normalize.scran")}

\item{methodsMeanExpression}{Chararacter vector of evaluted methods. To run all methods, use
c("DESeq2", "limmaVoom", "edgeR","BPSC", "MAST", "ROTS")}

\item{null}{binary indicator of true/false. True = Non-null gene and FALSE = Null gene.}
}
\value{
\code{data} List of filtered data, including count matrix, sample condition vector,
                 and logical vector for null gene status (TRUE if null).
    \code{pvals_longformat} data.frame of pvals.
}
\examples{
ipsc_eset <- get(load(system.file("testdata", "HumanTungiPSC.rda", package = "ashbun")))
counts <- exprs(ipsc_eset)[sample(nrow(exprs(ipsc_eset)), 500), ]
condition <- pData(ipsc_eset)$replicate

results <- query.pipeline(counts = counts,
                          condition = condition,
                          is_nullgene = NULL,
                          methodsNormalize = c("TMM", "RLE", "census","scran"),
                          methodsMeanExpression = c("DESeq2", "limmaVoom"))

}
